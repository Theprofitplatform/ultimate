version: '3.8'

# Production Environment Configuration
# Optimized for high availability, security, and performance

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ultimate-prod-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ultimate_production}
      POSTGRES_USER: ${POSTGRES_USER:-ultimate_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    networks:
      - ultimate-production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ultimate_user} -d ${POSTGRES_DB:-ultimate_production}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ultimate-prod-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
      - ./redis/redis-prod.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    networks:
      - ultimate-production
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Application (Primary)
  api:
    image: ghcr.io/theprofitplatform/ultimate/api:${VERSION:-latest}
    container_name: ultimate-prod-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_PORT: 9090
      WS_PORT: 9092
      DATABASE_URL: postgresql://${POSTGRES_USER:-ultimate_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ultimate_production}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      LOG_LEVEL: warn
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      SESSION_SECRET: ${SESSION_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_PROJECT_ID: ${GOOGLE_PROJECT_ID}
      GOOGLE_PRIVATE_KEY: ${GOOGLE_PRIVATE_KEY}
      GOOGLE_CLIENT_EMAIL: ${GOOGLE_CLIENT_EMAIL}
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      CORS_ORIGIN: https://theprofitplatform.com.au
      CLUSTER_MODE: true
      CLUSTER_WORKERS: 0
      MAX_CONNECTIONS: 200
      ENABLE_SWAGGER: false
      ENABLE_MORGAN_LOGGING: false
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "127.0.0.1:9090:9090"
      - "127.0.0.1:9092:9092"
    networks:
      - ultimate-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # API Application (Replica for High Availability)
  api-replica:
    image: ghcr.io/theprofitplatform/ultimate/api:${VERSION:-latest}
    container_name: ultimate-prod-api-replica
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_PORT: 9090
      WS_PORT: 9092
      DATABASE_URL: postgresql://${POSTGRES_USER:-ultimate_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ultimate_production}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      LOG_LEVEL: warn
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      SESSION_SECRET: ${SESSION_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_PROJECT_ID: ${GOOGLE_PROJECT_ID}
      GOOGLE_PRIVATE_KEY: ${GOOGLE_PRIVATE_KEY}
      GOOGLE_CLIENT_EMAIL: ${GOOGLE_CLIENT_EMAIL}
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      CORS_ORIGIN: https://theprofitplatform.com.au
      CLUSTER_MODE: true
      CLUSTER_WORKERS: 0
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "127.0.0.1:9091:9090"
      - "127.0.0.1:9093:9092"
    networks:
      - ultimate-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'
    profiles:
      - ha  # High Availability profile
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Web Application
  web:
    image: ghcr.io/theprofitplatform/ultimate/web:${VERSION:-latest}
    container_name: ultimate-prod-web
    restart: unless-stopped
    environment:
      NODE_ENV: production
    ports:
      - "127.0.0.1:3000:80"
    networks:
      - ultimate-production
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run

  # Background Worker (Primary)
  worker:
    image: ghcr.io/theprofitplatform/ultimate/api:${VERSION:-latest}
    container_name: ultimate-prod-worker
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-ultimate_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ultimate_production}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      LOG_LEVEL: warn
      WORKER_CONCURRENCY: 10
      QUEUE_NAME: ultimate-production-queue
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
    volumes:
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ultimate-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["npm", "run", "worker"]
    healthcheck:
      test: ["CMD", "node", "/app/scripts/worker-health-check.js"]
      interval: 60s
      timeout: 15s
      retries: 2
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Background Worker (Replica)
  worker-replica:
    image: ghcr.io/theprofitplatform/ultimate/api:${VERSION:-latest}
    container_name: ultimate-prod-worker-replica
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-ultimate_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ultimate_production}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      LOG_LEVEL: warn
      WORKER_CONCURRENCY: 5
      QUEUE_NAME: ultimate-production-queue
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
    volumes:
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ultimate-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["npm", "run", "worker"]
    healthcheck:
      test: ["CMD", "node", "/app/scripts/worker-health-check.js"]
      interval: 60s
      timeout: 15s
      retries: 2
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    profiles:
      - ha  # High Availability profile
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ultimate-prod-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/production.conf:/etc/nginx/conf.d/default.conf
      - ./ssl/production:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ultimate-production
    depends_on:
      - web
      - api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: ultimate-prod-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER:-ultimate_user}
      POSTGRES_DB: ${POSTGRES_DB:-ultimate_production}
      BACKUP_SCHEDULE: "0 2 * * *"
      BACKUP_RETENTION: "30"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup-production.sh:/backup.sh
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ultimate-production
    depends_on:
      - postgres
    profiles:
      - backup
    command: /backup.sh
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ultimate-prod-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/production.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
    ports:
      - "127.0.0.1:9191:9090"
    networks:
      - ultimate-production
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: ultimate-prod-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "127.0.0.1:9100:9100"
    networks:
      - ultimate-production
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true

# Named volumes for data persistence
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/ultimate-production/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/ultimate-production/redis
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/ultimate-production/prometheus

# Networks
networks:
  ultimate-production:
    driver: bridge
    name: ultimate-production
    ipam:
      config:
        - subnet: 172.22.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-ultimate-prod